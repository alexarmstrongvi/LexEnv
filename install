#!/usr/bin/env bash
# TODO: Handle realpath command not existing
DOTFILES_PATH="$(realpath ${BASH_SOURCE[0]} | xargs dirname)"
if [ ! -d "$DOTFILES_PATH" ]; then
    echo "Unable to locate dotfiles path"
    exit 1
fi
export DOTFILES_PATH

echo "Installing dotfiles from $DOTFILES_PATH"
################################################################################
# Symlink to dotfiles
################################################################################
pushd $DOTFILES_PATH > /dev/null

########################################
# Configure ~/.local
########################################
# Require local user folders
mkdir -p $HOME/.local/bin 2> /dev/null
mkdir -p $HOME/.local/lib 2> /dev/null
mkdir -p $HOME/.local/share 2> /dev/null
mkdir -p $HOME/.local/tmp 2> /dev/null
sleep 0.001 # Wait for directory to be created

local_paths="$(find dotfiles/.local/bin -type f)"
local_paths="${local_paths} $(find dotfiles/.local/lib -maxdepth 1 -type f)"
local_paths="${local_paths} $(find dotfiles/.local -maxdepth 2 -mindepth 2 -type d)"
for file in $local_paths; do
    target_path="$HOME/${file##dotfiles/}"
    echo -e "Creating symlink: $target_path"
    ln -s -f $DOTFILES_PATH/$file $target_path
done

# Require expected tmp directories
pushd $HOME/.local/tmp > /dev/null
mkdir -p vim/swapfiles vim/undodir vim/backupdir 2> /dev/null
popd > /dev/null

########################################
# Configure ~/.config
########################################
mkdir $HOME/.config 2> /dev/null
config_paths="$(find dotfiles/.config/ -maxdepth 1 -mindepth 1)"
for file in $config_paths; do
    target_path="$HOME/.config/$(basename $file)"
    echo -e "Creating symlink: $target_path"
    ln -s -f $DOTFILES_PATH/$file $target_path
done

########################################
# Update ~/.gitconfig
########################################
cfg=$HOME/.gitconfig
if [ -f $cfg ] && [ ! -L $cfg ] && ! grep -q "$DOTFILES_PATH" $cfg; then
    include_str="[include]\n    path = ${DOTFILES_PATH}/dotfiles/git/.gitconfig"
    echo -e "$include_str" >> $cfg
fi

########################################
# Symlink remaining dotfiles
########################################
dotfiles=$(find dotfiles -maxdepth 2 -name '\.*' )
for dotfile in $dotfiles; do
    bname="$(basename $dotfile)"
    if [ $bname == ".local" ] || [ $bname == ".config" ]; then
        continue
    fi
    target_path="$HOME/$bname"

    if [ -d $target_path ] && [ ! -L $target_path ]; then
        echo "Directory exists: $target_path [Skipping]"
        continue
    elif [ -f $target_path ] && [ ! -L $target_path ]; then
        echo "File exists: $target_path [Backing up]"
        mv $target_path ${target_path}-backup
    fi

    # Check if valid symolic link already exists
    # if [ -L $target_path ] && [ -e $target_path ]; then
    #     echo "WARNING :: Symbolic link exists: $target_path -> $(realpath $target_path)"
    # fi
    echo -e "Creating symlink: $target_path"
    ln -s -f $DOTFILES_PATH/$dotfile $target_path
done
popd > /dev/null

# TODO: Use GNU Stow
# if command -v stow > dev/null; then
#     for folder in ${STOW_FOLDERS[@]}; do
#         echo "stow $folder"
#         # stow -D $folder
#         # stow $folder
#     done
# fi
